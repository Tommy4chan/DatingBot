from aiogram import Dispatcher, Bot, types
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

from bot.keyboards import KB_CONTINUE_REGISTRATION, KB_GENDER_SELECTION, KB_GET_LOCATION, KB_CHOOSE_YES_OR_NOT
from bot.utils.main import decode_callback_data, get_location_by_coordinates, get_location_by_name


class Form(StatesGroup):
    name = State()  # Will be represented in storage as 'Form:name'
    gender = State()  # Will be represented in storage as 'Form:gender'
    age = State()  # Will be represented in storage as 'Form:age'
    target = State() # Will be represented in storage as 'Form:targer'
    location = State() # Will be represented in storage as 'Form:location'
    description = State() # Will be represented in storage as 'Form:description'
    photo = State() # Will be represented in storage as 'Form:description'


async def __start(message: types.Message):
    """
    Conversation's entry point
    """

    bot = message.bot
    user_id = message.from_user.id

    await bot.send_message(user_id, "–ü—Ä–∏–≤—ñ—Ç, —è –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω—É –ø–∞—Ä—É, –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–æ–≤–Ω–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è üë©‚ù§Ô∏èüë®...", reply_markup=KB_CONTINUE_REGISTRATION)


async def __continue_regestration(message: types.Message):
    """
    Start of regestration
    """

    bot = message.bot
    user_id = message.from_user.id

    await Form.name.set()

    await bot.send_message(user_id, "–ù–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤–∞—à–µ —ñ–º'—è, —è–∫–µ —É—Å—ñ –±—É–¥—É—Ç—å –±–∞—á–∏—Ç–∏ –≤ –∞–Ω–∫–µ—Ç—ñ")


async def __register_name(query: CallbackQuery, state: FSMContext):
    """
    Process user name
    """

    bot = query.bot
    user_id = query.from_user.id

    async with state.proxy() as data:
        data['name'] = query.text
        await bot.send_message(user_id, "–ß—É–¥–æ–≤–æ, –≤–∞—à–µ —ñ–º'—è –∑–∞–ø–∏—Å–∞–Ω–æ!")
        

    await Form.next()
    await bot.send_message(user_id, "–í–∫–∞–∂—ñ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç—å:", reply_markup=KB_GENDER_SELECTION)


async def __register_gender(query: CallbackQuery, state: FSMContext):
    """
    Process user gender
    """
    print(1)
    bot = query.bot
    user_id = query.from_user.id
    await Form.next()
    await state.update_data(gender=await decode_callback_data(query))
    await bot.send_message(user_id, "–í–∞—à—É —Å—Ç–∞—Ç—å –≤–∫–∞–∑–∞–Ω–æ!")
        
    
    await bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å —Å–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤:")


async def __process_age_invalid(message: types.Message):
    """
    If age is invalid
    """
    return await message.reply("–í—ñ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º!\n–í–≤–µ–¥—ñ—Ç—å —Å–∫—ñ–ª—å–∫–∏ –í–∞–º —Ä–æ–∫—ñ–≤:")


async def __process_age_out_of_range(message: types.Message):
    """
    If age is out of range
    """
    return await message.reply("–í—ñ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤ –º–µ–∂–∞—Ö –≤—ñ–¥ 16 –¥–æ 50!\n–í–≤–µ–¥—ñ—Ç—å —Å–∫—ñ–ª—å–∫–∏ –í–∞–º —Ä–æ–∫—ñ–≤:")


async def __process_age(message: types.Message, state: FSMContext):
    """
    Process user age
    """

    bot = message.bot
    user_id = message.from_user.id

    await state.update_data(age=int(message.text))
    await Form.next()

    await bot.send_message(user_id, "–ß—É–¥–æ–≤–æ, –≤—ñ–∫ –∑–∞–∑–Ω–∞—á–µ–Ω–æ!")

    await bot.send_message(user_id, "–ó–∞—Ä–∞–∑ –≤–∏–±–µ—Ä—ñ—Ç—å –∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–Ω–∞–π—Ç–∏?", reply_markup=KB_GENDER_SELECTION)


async def __register_targer(query: CallbackQuery, state: FSMContext):
    """
    Process user targer gender
    """

    bot = query.bot
    user_id = query.from_user.id

    await state.update_data(target=decode_callback_data(query))
    await bot.send_message(user_id, "–ß—É–¥–æ–≤–æ! –î–∞–Ω—ñ –∑–∞–ø–∏—Å–∞–Ω—ñ!")
        
    await Form.next()
    await bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –ø—Ä–æ–∂–∏–≤–∞—î—Ç–µ. –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ—Å—Ü—è —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è, –º–æ–∂–µ—Ç–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ!:", reply_markup=KB_GET_LOCATION)


async def __process_location(message: types.Message, state: FSMContext):
    """
    Process user location
    """

    bot = message.bot
    user_id = message.from_user.id
    
    user_location = await get_location_by_coordinates(message.location.latitude, message.location.longitude)

    await state.update_data(location=user_location)
    
    await bot.send_message(user_id, f"{user_location} - —Ü–µ –≤–∞—à–µ –º—ñ—Å—Ç–æ?", reply_markup=KB_CHOOSE_YES_OR_NOT)


async def __location_correct(message: types.Message, state: FSMContext):
    """
    Called if location correct
    """

    bot = message.bot
    user_id = message.from_user.id

    await Form.next()
    
    await bot.send_message(user_id, f"–í–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–ª–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º—ñ—Å—Ç–æ")


async def __location_incorrect(message: types.Message, state: FSMContext):
    """
    Called if location incorrect
    """

    bot = message.bot
    user_id = message.from_user.id
    
    await bot.send_message(user_id, f"–°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É")


async def __find_location_by_name(message: types.Message, state: FSMContext):
    """
    Called if location correct
    """

    bot = message.bot
    user_id = message.from_user.id

    user_location = await get_location_by_name(message.text)
    
    if user_location == 'not found':
        bot.send_message(user_id, "–í–∞—à–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")

    await bot.send_message(user_id, f"{user_location} - —Ü–µ –≤–∞—à–µ –º—ñ—Å—Ç–æ?", reply_markup=KB_CHOOSE_YES_OR_NOT)


def register_regestration_handlers(dp: Dispatcher):

    # Message handlers
    
    dp.register_message_handler(__start, commands=["start"])
    dp.register_message_handler(__register_name, state=Form.name)
    dp.register_message_handler(__process_age_invalid, lambda message: not message.text.isdigit(), state=Form.age)
    dp.register_message_handler(__process_age_out_of_range, lambda message: int(message.text) < 16 or int(message.text) > 50, state=Form.age)
    dp.register_message_handler(__process_age, lambda message: message.text.isdigit(), state=Form.age)
    dp.register_message_handler(__process_location, content_types=['location'], state=Form.location)
    dp.register_message_handler(__find_location_by_name, content_types=['text'], state=Form.location)
    
    #dp.register_message_handler(__new_poweroff_schedule, commands=["schedule"])
    #dp.register_message_handler(__new_poweroff_schedule, content_types=['text'], text="–ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—åüïî")

    # Callback handlers

    dp.register_callback_query_handler(__continue_regestration, text="continue_regestration")
    dp.register_callback_query_handler(__register_gender, Text(startswith='gender_'), state=Form.gender)
    dp.register_callback_query_handler(__register_targer, Text(startswith='gender_'), state=Form.target)
    dp.register_callback_query_handler(__location_correct, text="yes", state=Form.location)
    dp.register_callback_query_handler(__location_incorrect, text="no", state=Form.location)
    #dp.register_callback_query_handler(__select_another_day, Text(startswith='weekday_'))
    #dp.register_callback_query_handler(__change_notification_state, Text(startswith='notification_'))
    #dp.register_callback_query_handler(__what_is_notification, Text(startswith='what_is_notification'))
    #dp.register_callback_query_handler(__developer, Text(startswith='developer'))
    #dp.register_callback_query_handler(__donate, Text(startswith='donate'))